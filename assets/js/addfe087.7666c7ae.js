"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6011],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(f,l(l({ref:t},m),{},{components:n})):a.createElement(f,l({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={description:"Nethermind C# Coding Style"},l="Coding Style",o={unversionedId:"for-developers/coding-style",id:"for-developers/coding-style",title:"Coding Style",description:"Nethermind C# Coding Style",source:"@site/docs/05-for-developers/coding-style.md",sourceDirName:"05-for-developers",slug:"/for-developers/coding-style",permalink:"/docs/for-developers/coding-style",draft:!1,editUrl:"https://github.com/NethermindEth/docs/tree/main/docs/docs/05-for-developers/coding-style.md",tags:[],version:"current",lastUpdatedAt:1692227448,formattedLastUpdatedAt:"Aug 16, 2023",frontMatter:{description:"Nethermind C# Coding Style"},sidebar:"tutorialSidebar",previous:{title:"Building from source",permalink:"/docs/for-developers/building-nethermind"},next:{title:"Custom Analytic Tools",permalink:"/docs/for-developers/custom-analytic-tools"}},s={},p=[{value:"General Rules:",id:"general-rules",level:2},{value:"Naming:",id:"naming",level:2}],m={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"coding-style"},"Coding Style"),(0,r.kt)("h2",{id:"general-rules"},"General Rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We use four spaces for indentation (not tabs).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do not use Hungarian Notation!")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Avoid more than one empty line at any time. For example, do not have two blank lines between members of a type.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If a file happens to differ in style from these guidelines (e.g. private members are named m","_","member rather than\n","_","member), the existing style in that file takes precedence.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We only use ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," when it's obvious what the variable type is (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"var stream = new FileStream(...)"),"\nnot ",(0,r.kt)("inlineCode",{parentName:"p"},"var stream = OpenStandardInput()"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fields should be specified at the top within type declarations.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When using a single-statement ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", we follow these conventions:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Using braces is always accepted, and required if any block of an if/else if/.../else compound statement uses braces\nor if a single statement body spans multiple lines."),(0,r.kt)("li",{parentName:"ul"},"Braces may be omitted only if the body of every block associated with an if/else if/.../else compound statement is\nplaced on a single line."," "))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Avoid complex conditions in ternary operators.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Avoid declaring methods with more than 5 parameters. Consider refactoring this code.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Try to replace large parameter-sets (> than 5 parameters) with one or more ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," parameters \u2013"),(0,r.kt)("p",{parentName:"li"},"especially when used in multiple method signatures."," ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Always call ",(0,r.kt)("inlineCode",{parentName:"p"},"Close()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Dispose()")," on classes that offer it."," ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Wrap instantiation of ",(0,r.kt)("inlineCode",{parentName:"p"},"IDisposable")," objects with a \u201c",(0,r.kt)("inlineCode",{parentName:"p"},"using"),"\u201d statement to ensure that Dispose() is"),(0,r.kt)("p",{parentName:"li"},"automatically called.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Always prefer aggregation over inheritance."," "))),(0,r.kt)("h2",{id:"naming"},"Naming:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"camelCase")," for local variables and parameters."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"_camelCase")," for internal and private fields and use readonly where possible. Prefix internal and private\ninstance fields with ",(0,r.kt)("inlineCode",{parentName:"li"},"_"),", and thread static fields with ",(0,r.kt)("inlineCode",{parentName:"li"},"t_"),"."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"snake_case")," for test method names."),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"IPascalCase")," for interfaces names (see the ",(0,r.kt)("inlineCode",{parentName:"li"},"I")," prefix)."),(0,r.kt)("li",{parentName:"ul"},"For the rest of identifiers not specified here, we use ",(0,r.kt)("inlineCode",{parentName:"li"},"PascalCase"),".")))}c.isMDXComponent=!0}}]);