"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6432],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>N});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),m=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=m(t.components);return r.createElement(p.Provider,{value:e},t.children)},c="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),c=m(a),s=n,N=c["".concat(p,".").concat(s)]||c[s]||f[s]||l;return a?r.createElement(N,i(i({ref:e},d),{},{components:a})):r.createElement(N,i({ref:e},d))}));function N(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[c]="string"==typeof t?t:n,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}s.displayName="MDXCreateElement"},4656:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const l={},i="Merge",o={unversionedId:"fundamentals/configuration/merge",id:"fundamentals/configuration/merge",title:"Merge",description:"| Property                | Env Variable                                   | Description                                                                                                                                                                                        | Default |",source:"@site/docs/fundamentals/04-configuration/merge.md",sourceDirName:"fundamentals/04-configuration",slug:"/fundamentals/configuration/merge",permalink:"/docs/fundamentals/configuration/merge",draft:!1,editUrl:"https://github.com/NethermindEth/docs/tree/main/docs/docs/fundamentals/04-configuration/merge.md",tags:[],version:"current",lastUpdatedAt:1692295600,formattedLastUpdatedAt:"Aug 17, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"KeyStore",permalink:"/docs/fundamentals/configuration/keystore"},next:{title:"Metrics",permalink:"/docs/fundamentals/configuration/metrics"}},p={},m=[],d={toc:m},c="wrapper";function f(t){let{components:e,...a}=t;return(0,n.kt)(c,(0,r.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"merge"},"Merge"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Property"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Env Variable"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"BuilderRelayUrl"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_BUILDERRELAYURL"),(0,n.kt)("td",{parentName:"tr",align:"left"},"URL to Builder Relay. If set when building blocks nethermind will send them to the relay."),(0,n.kt)("td",{parentName:"tr",align:"left"},"null")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"CollectionsPerDecommit"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_COLLECTIONSPERDECOMMIT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Requests the GC to release process memory back to OS. Accept values ",(0,n.kt)("inlineCode",{parentName:"td"},"-1")," which disables it, ",(0,n.kt)("inlineCode",{parentName:"td"},"0")," which releases every time, and any positive integer which does it after that many EngineApi calls."),(0,n.kt)("td",{parentName:"tr",align:"left"},"75")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"CompactMemory"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_COMPACTMEMORY"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Reduces process used memory. Accept values ",(0,n.kt)("inlineCode",{parentName:"td"},"No")," which disables it, ",(0,n.kt)("inlineCode",{parentName:"td"},"Yes")," which compacts normal heaps, ",(0,n.kt)("inlineCode",{parentName:"td"},"Full")," compacts large object heap too (only when SweepMemory is set to ",(0,n.kt)("inlineCode",{parentName:"td"},"Gen2"),")."),(0,n.kt)("td",{parentName:"tr",align:"left"},"Yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Enabled"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_ENABLED"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Defines whether the Merge plugin is enabled bundles are allowed."),(0,n.kt)("td",{parentName:"tr",align:"left"},"true")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"FinalTotalDifficulty"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_FINALTOTALDIFFICULTY"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Final total difficulty is total difficulty of the last PoW block. FinalTotalDifficulty >= TerminalTotalDifficulty."),(0,n.kt)("td",{parentName:"tr",align:"left"},"null")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"PrioritizeBlockLatency"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_PRIORITIZEBLOCKLATENCY"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Reduces block EngineApi latency by disabling Garbage Collection during EngineApi calls."),(0,n.kt)("td",{parentName:"tr",align:"left"},"true")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"SecondsPerSlot"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_SECONDSPERSLOT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Deprecated since v1.14.7. Please use Blocks.SecondsPerSlot. Seconds per slot."),(0,n.kt)("td",{parentName:"tr",align:"left"},"12")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"SweepMemory"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_SWEEPMEMORY"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Reduces memory usage by forcing Garbage Collection between EngineApi calls. Accept values ",(0,n.kt)("inlineCode",{parentName:"td"},"NoGc")," (-1), Gen0 (0), Gen1 (1), Gen2 (2)."),(0,n.kt)("td",{parentName:"tr",align:"left"},"Gen1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"TerminalBlockHash"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_TERMINALBLOCKHASH"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Terminal PoW block hash used for transition process."),(0,n.kt)("td",{parentName:"tr",align:"left"},"null")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"TerminalBlockNumber"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_TERMINALBLOCKNUMBER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Terminal PoW block number used for transition process."),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"TerminalTotalDifficulty"),(0,n.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_MERGECONFIG_TERMINALTOTALDIFFICULTY"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Terminal total difficulty used for transition process."),(0,n.kt)("td",{parentName:"tr",align:"left"},"null")))))}f.isMDXComponent=!0}}]);