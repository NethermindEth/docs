"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8854],{3905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var c=n.createContext({}),s=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},p=function(t){var e=s(t.components);return n.createElement(c.Provider,{value:e},t.children)},f="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),f=s(r),u=a,d=f["".concat(c,".").concat(u)]||f[u]||m[u]||o;return r?n.createElement(d,l(l({ref:e},p),{},{components:r})):n.createElement(d,l({ref:e},p))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[f]="string"==typeof t?t:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8825:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={},l="Blocks",i={unversionedId:"fundamentals/configuration/blocks",id:"fundamentals/configuration/blocks",title:"Blocks",description:"| Property            | Env Variable                                | Description                                                                                                                                                                  | Default    |",source:"@site/docs/02-fundamentals/04-configuration/blocks.md",sourceDirName:"02-fundamentals/04-configuration",slug:"/fundamentals/configuration/blocks",permalink:"/docs/docs/fundamentals/configuration/blocks",draft:!1,editUrl:"https://github.com/nethermindeth/docs/tree/main/docs/02-fundamentals/04-configuration/blocks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AuRaMerge",permalink:"/docs/docs/fundamentals/configuration/auramerge"},next:{title:"Bloom",permalink:"/docs/docs/fundamentals/configuration/bloom"}},c={},s=[],p={toc:s},f="wrapper";function m(t){let{components:e,...r}=t;return(0,a.kt)(f,(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"blocks"},"Blocks"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Property"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Env Variable"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ExtraData"),(0,a.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_BLOCKSCONFIG_EXTRADATA"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Block header extra data. 32-bytes shall be extra data max length."),(0,a.kt)("td",{parentName:"tr",align:"left"},"Nethermind")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"MinGasPrice"),(0,a.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_BLOCKSCONFIG_MINGASPRICE"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Minimum gas premium for transactions accepted by the block producer. Before EIP1559: Minimum gas price for transactions accepted by the block producer."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"RandomizedBlocks"),(0,a.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_BLOCKSCONFIG_RANDOMIZEDBLOCKS"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Only used in NethDev. Setting this to true will change the difficulty of the block randomly within the constraints."),(0,a.kt)("td",{parentName:"tr",align:"left"},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"TargetBlockGasLimit"),(0,a.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_BLOCKSCONFIG_TARGETBLOCKGASLIMIT"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Block gas limit that the block producer should try to reach in the fastest possible way based on protocol rules. NULL value means that the miner should follow other miners."),(0,a.kt)("td",{parentName:"tr",align:"left"},"null")))))}m.isMDXComponent=!0}}]);