"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4867],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=u(n),c=r,m=h["".concat(i,".").concat(c)]||h[c]||p[c]||o;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[h]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={},s="Eth2 Validator",l={unversionedId:"resources/guides-and-helpers/validator-setup/eth2-validator",id:"resources/guides-and-helpers/validator-setup/eth2-validator",title:"Eth2 Validator",description:"Introduction",source:"@site/docs/07-resources/guides-and-helpers/validator-setup/eth2-validator.md",sourceDirName:"07-resources/guides-and-helpers/validator-setup",slug:"/resources/guides-and-helpers/validator-setup/eth2-validator",permalink:"/nethermindeth/docs/resources/guides-and-helpers/validator-setup/eth2-validator",draft:!1,editUrl:"https://github.com/NethermindEth/docs/tree/main/docs/docs/07-resources/guides-and-helpers/validator-setup/eth2-validator.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Aura Validator",permalink:"/nethermindeth/docs/resources/guides-and-helpers/validator-setup/aura-validator"},next:{title:"Known Issues",permalink:"/nethermindeth/docs/resources/know-issues"}},i={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Using Testnets",id:"using-testnets",level:3},{value:"Hardware and Network Requirements",id:"hardware-and-network-requirements",level:3},{value:"Setup",id:"setup",level:2},{value:"Installing Prerequisites",id:"installing-prerequisites",level:3},{value:"<strong>Installing Nethermind</strong>",id:"installing-nethermind",level:4},{value:"<strong>Installing Consensus Client</strong>",id:"installing-consensus-client",level:4},{value:"Configuration",id:"configuration",level:3},{value:"Syncing your node",id:"syncing-your-node",level:3},{value:"Running a Validator",id:"running-a-validator",level:2},{value:"Generating Validator Keys",id:"generating-validator-keys",level:3},{value:"<strong>Staking deposit cli</strong>",id:"staking-deposit-cli",level:4},{value:"<strong>Wagyu Key Gen</strong>",id:"wagyu-key-gen",level:4},{value:"Depositing ETH",id:"depositing-eth",level:3},{value:"Depositing on Testnets",id:"depositing-on-testnets",level:4},{value:"Configuring a Validator",id:"configuring-a-validator",level:3},{value:"Validator Tips and Tricks",id:"validator-tips-and-tricks",level:3},{value:"Monitoring",id:"monitoring",level:4},{value:"Credits",id:"credits",level:2}],d={toc:u},h="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(h,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"eth2-validator"},"Eth2 Validator"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This tutorial will allow anyone to set up an Ethereum Validator node as long as you have the sufficient hardware\nrequirements and familiarity with the command line. This guide will use installation instructions for Ubuntu 20.04 but\ninstructions to other operating systems will be linked."),(0,r.kt)("h3",{id:"using-testnets"},"Using Testnets"),(0,r.kt)("p",null,"We highly recommend you use one of the following test networks before you attempt running a validator on Ethereum\nMainnet to get familiarized with the process:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ropsten"),(0,r.kt)("li",{parentName:"ul"},"Kiln")),(0,r.kt)("p",null,"Coming Soon"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sepolia"),(0,r.kt)("li",{parentName:"ul"},"Goerli")),(0,r.kt)("p",null,"We will go through the most important steps in the ",(0,r.kt)("a",{parentName:"p",href:"https://launchpad.ethereum.org/en/checklist"},"checklist")," and\na ",(0,r.kt)("a",{parentName:"p",href:"https://kiln.launchpad.ethereum.org/en/overview"},"general overview")," of the responsibilities of a validator provided by\nthe Ethereum foundation."),(0,r.kt)("h3",{id:"hardware-and-network-requirements"},"Hardware and Network Requirements"),(0,r.kt)("p",null,"You will need to run two pieces of software on your machine to run a validator. The two software have several different\nimplementations maintained by different teams. Each implementation has their own hardware requirements, but generally\nyou would need for mainnet:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Memory: 16 GB RAM"),(0,r.kt)("li",{parentName:"ul"},"Processor: Intel Core i5\u2013760 or better (CPUs made later than 2010 are usually fine)"),(0,r.kt)("li",{parentName:"ul"},"Storage: 1 TB SSD"),(0,r.kt)("li",{parentName:"ul"},"Network: Broadband connection (preferably wired)")),(0,r.kt)("p",null,"Please consult the docs / website of the specific client software you choose to run the Ethereum chain with. Note that\nthe hardware requirements are lower if you intend to run on testnets only."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("h3",{id:"installing-prerequisites"},"Installing Prerequisites"),(0,r.kt)("p",null,"The two pieces of software to run a node for proof of stake Ethereum are called the consensus client and the execution\nclient. The consensus client maintains the proof of stake consensus mechanism while the execution client stores and\nvalidates transactions for the proof of stake layer."),(0,r.kt)("p",null,"Install these prerequisites before proceeding:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt -y install software-properties-common wget curl ccze\n")),(0,r.kt)("p",null,"This guide will go through the Nethermind and Lighthouse client combination."),(0,r.kt)("h4",{id:"installing-nethermind"},(0,r.kt)("strong",{parentName:"h4"},"Installing Nethermind")),(0,r.kt)("p",null,"Run the following command to install Nethermind:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo add-apt-repository ppa:nethermindeth/nethermind; sudo apt install nethermind\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/nethermindeth/docs/fundamentals/running-nethermind-post-merge"},"here")," for docs for\nother ways to install Nethermind."),(0,r.kt)("h4",{id:"installing-consensus-client"},(0,r.kt)("strong",{parentName:"h4"},"Installing Consensus Client")),(0,r.kt)("p",null,'{% tabs %}\n{% tab title="Lighthouse" %}\nDownload the ',(0,r.kt)("a",{parentName:"p",href:"https://github.com/sigp/lighthouse/releases"},"latest release")," from lighthouse. You can also install\nlighthouse through other methods by following ",(0,r.kt)("a",{parentName:"p",href:"https://lighthouse-book.sigmaprime.io/installation.html"},"their docs"),". To\ninstall v2.3.1 of lighthouse (latest release as of June 21 2022):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget <https://github.com/sigp/lighthouse/releases/download/v2.3.1/lighthouse-v2.3.1-x86_64-unknown-linux-gnu.tar.gz>\ntar xvf lighthouse-v2.3.1-x86_64-unknown-linux-gnu.tar.gz\nrm lighthouse-v2.3.1-x86_64-unknown-linux-gnu.tar.gz\n")),(0,r.kt)("p",null,"Install globally:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo cp ~/lighthouse /usr/local/bin\nrm ~/lighthouse\n")),(0,r.kt)("p",null,"{% endtab %}"),(0,r.kt)("p",null,'{% tab title="Teku" %}\nYou can install Teku\nfollowing ',(0,r.kt)("a",{parentName:"p",href:"https://docs.teku.consensys.net/en/latest/HowTo/Get-Started/Installation-Options/Install-Binaries/"},"their docs"),". \\\nQuick guide how to install Teku using binary distribution:\\"),(0,r.kt)("p",null,"Check if Java is already installed on Your machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Java --version\n")),(0,r.kt)("p",null,"if not You can use this command to install it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install default-jdk\n")),(0,r.kt)("p",null,"Then, download Teku and extract it (currently latest version is 22.8.1):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://artifacts.consensys.net/public/teku/raw/names/teku.tar.gz/versions/22.8.1/teku-22.8.1.tar.gz\ntar xvf teku-22.8.1.tar.gz\nrm teku-22.8.1.tar.gz\n")),(0,r.kt)("p",null,"Install globally:"),(0,r.kt)("pre",{class:"language-bash"},(0,r.kt)("code",{class:"lang-bash"},(0,r.kt)("strong",null,"sudo cp -r teku-22.8.1 /usr/local/bin"),"rm teku-22.8.1")),(0,r.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"It is recommended to run the consensus and execution client as a systemd service, which will allow the two processes run\nin the background and start up again if your machine restarts, improving reliability and uptime of your validator. This\nis not as crucial for running testnet validators and you can\nfollow ",(0,r.kt)("a",{parentName:"p",href:"https://docs.nethermind.io/nethermind/first-steps-with-nethermind/running-nethermind-post-merge"},"this guide")," on\nhow to connect to testnets with Nethermind and other consensus clients."),(0,r.kt)("p",null,"Create a dedicated user for Nethermind. This will set up the correct permissions and directory where the chain data is\nstored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo useradd -m -s /bin/false nethermindeth\nsudo mkdir -p /var/lib/nethermind\nsudo chown -R nethermindeth:nethermindeth /var/lib/nethermind\nsudo chown -R nethermindeth:nethermindeth /usr/share/nethermind\n")),(0,r.kt)("p",null,"Create a JWT Token which will be used to communicate between consensus and execution clients. For more information about\nJWT Token please refer\nto ",(0,r.kt)("a",{parentName:"p",href:"/nethermindeth/docs/fundamentals/running-nethermind-post-merge#step-3--configure-json-rpc-api"},"this section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'openssl rand -hex 32 | tr -d "\\n" > "/var/lib/nethermind/jwt-secret"\n')),(0,r.kt)("p",null,"Create a systemd config file. This will run Nethermind as a systemd service on your machine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/nethermind.service\n")),(0,r.kt)("p",null,"Paste the following service configuration into the file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[Unit]\nDescription=Nethermind Ethereum Client\nAfter=network.target\nWants=network.target\n\n[Service]\nUser=nethermindeth\nGroup=nethermindeth\nType=simple\nRestart=always\nRestartSec=5\nTimeoutStopSec=180\nWorkingDirectory=/home/nethermindeth\nExecStart=/usr/share/nethermind/Nethermind.Runner \\\n    --config mainnet \\\n    --Init.BaseDbPath /var/lib/nethermind \\\n    --JsonRpc.Enabled true \\\n    --JsonRpc.EngineHost "0.0.0.0" \\\n    --JsonRpc.EnginePort 8551 \\\n    --JsonRpc.JwtSecretFile /var/lib/nethermind/jwt-secret\n\n[Install]\nWantedBy=default.target\n')),(0,r.kt)("p",null,"To close and save the file, press ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl"),"+ ",(0,r.kt)("inlineCode",{parentName:"p"},"X"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Y"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Enter"),"."),(0,r.kt)("p",null,"Reload systemd to reflect the changes and start the nethermind service. The status should say active in green text. If\nnot, repeat the configuration steps and see if it resolves the problem"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl start nethermind.service\nsudo systemctl status nethermind.service\n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Q")," to quit viewing the status. Enable the nethermind service to automatically start on reboot:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable nethermind.service\n")),(0,r.kt)("p",null,"To see the Nethermind logs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -f -u nethermind.service -o cat | ccze -A\n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," to stop showing those messages."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'If any path from sample would be changed (like "Init.baseDbPath") please ensure that You set newly added user as a owner\nof this directory and execute "',(0,r.kt)("em",{parentName:"p"},"systemctl restart nethermind.service"),'" command.')),(0,r.kt)("p",null,"Now repeat the process to run a CL beacon chain:"),(0,r.kt)("p",null,'{% tabs %}\n{% tab title="Lighthouse" %}'),(0,r.kt)("pre",{class:"language-bash"},(0,r.kt)("code",{class:"lang-bash"},(0,r.kt)("strong",null,"sudo useradd --no-create-home --shell /bin/false lighthousebeacon"),"sudo mkdir -p /var/lib/lighthouse sudo chown -R lighthousebeacon:lighthousebeacon /var/lib/lighthouse")),(0,r.kt)("p",null,"Add systemd file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/lighthousebeacon.service\n")),(0,r.kt)("p",null,"Paste the following in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[Unit]\nDescription=Lighthouse Ethereum Client Beacon Node\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=lighthousebeacon\nGroup=lighthousebeacon\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/lighthouse bn \\\\\n    --network mainnet \\\\\n    --datadir /var/lib/lighthouse \\\\\n    --staking \\\\\n    --http-allow-sync-stalled \\\\\n    --merge \\\\\n    --execution-endpoints <http://127.0.0.1:8551> \\\\\n    --metrics-explanation \\\\\n    --validator-monitor-auto \\\\\n    --jwt-secrets="/var/lib/nethermind/jwt-secret"\n\n[Install]\nWantedBy=multi-user.target\n')),(0,r.kt)("p",null,"The beacon node needs to share something called a JWT secret with Nethermind, so let the secret be accessible to all\nusers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chmod +r /var/lib/nethermind/jwt-secret\n")),(0,r.kt)("p",null,"Reload and start the lighthouse node. The status should say active in green text if running correctly. If not, repeat\nthe configuration steps and see if it resolves the problem."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl start lighthousebeacon.service\nsudo systemctl status lighthousebeacon.service\n")),(0,r.kt)("p",null,"Enable the Lighthouse beacon node service to automatically start on reboot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable lighthousebeacon.service\n")),(0,r.kt)("p",null,"You can watch the logs from your Lighthouse beacon node using this command. Lighthouse may show errors if Nethermind is\nnot synced, so wait until Nethermind is synced to see if the errors persist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -f -u lighthousebeacon.service -o cat | ccze -A\n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," to stop showing those messages.\n{% endtab %}"),(0,r.kt)("p",null,'{% tab title="Teku" %}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo useradd --no-create-home --shell /bin/false tekubeacon\nsudo mkdir -p /var/lib/teku\nsudo chown -R tekubeacon:tekubeacon /var/lib/teku\n")),(0,r.kt)("p",null,"Add systemd file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/tekubeacon.service\n")),(0,r.kt)("p",null,"Paste the following in (make sure to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000")," address with your own\nEthereum address where you want to receive the proceeds from transaction fees (post merge)):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[Unit]\nDescription=Teku Ethereum Client Beacon Node\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=tekubeacon\nGroup=tekubeacon\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/teku-22.8.1 \\\n    --network mainnet \\\n    --data-path /var/lib/teku/datadir-teku \\\n    --ee-endpoint http://localhost:8551 \\\n    --ee-jwt-secret-file /var/lib/nethermind/jwt-secret \\\n    --rest-api-enabled\n    --validators-proposer-default-fee-recipient=0x0000000000000000000000000000000000000000\n\n[Install]\nWantedBy=multi-user.target\n")),(0,r.kt)("p",null,"The beacon node needs to share something called a JWT secret with Nethermind, so let the secret be accessible to all\nusers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chmod +r /var/lib/nethermind/jwt-secret\n")),(0,r.kt)("p",null,"Reload and start the lighthouse node. The status should say active in green text if running correctly. If not, repeat\nthe configuration steps and see if it resolves the problem."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl start tekubeacon.service\nsudo systemctl status tekubeacon.service\n")),(0,r.kt)("p",null,"Enable the Teku beacon node service to automatically start on reboot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable tekubeacon.service\n")),(0,r.kt)("p",null,"You can watch the logs from your Teku beacon node using this command. Teku may show errors if Nethermind is not synced,\nso wait until Nethermind is synced to see if the errors persist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -f -u tekubeacon.service -o cat | ccze -A\n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," to stop showing those messages.\n{% endtab %}\n{% endtabs %}"),(0,r.kt)("h3",{id:"syncing-your-node"},"Syncing your node"),(0,r.kt)("p",null,"The execution client still stores the blockchain state from the old proof of work chain, so it can take days to weeks to\nfully sync with the network, depending on your sync mode, hardware and network. The consensus client will also typically\ntake a few days to fully sync on mainnet."),(0,r.kt)("p",null,"Please ensure both processes are synced before running your validator. Without the latest state your validator will not\nbe able to vote and earn rewards on the proof of stake chain."),(0,r.kt)("p",null,'{% tabs %}\n{% tab title="Nethermind" %}\nA Nethermind node should be synced if the logs no longer say it is downloading blocks. Post merge, new payloads from the\nconsensus client should display VALID instead of SYNCING in the logs.'),(0,r.kt)("h2",{id:"running-a-validator"},"Running a Validator"),(0,r.kt)("h3",{id:"generating-validator-keys"},"Generating Validator Keys"),(0,r.kt)("p",null,"You will need to generate keys for your validator. These keys are the ONLY way to withdraw your funds after staking your\nETH, so you have to ensure you have backed up your keys. There are two options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethereum/staking-deposit-cli"},"staking-deposit-cli")," - recommended for those comfortable with the\ncommand line"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/stake-house/wagyu-key-gen"},"Wagyu Key Gen")," - desktop app, choose the correct network (mainnet,\nkiln) to generate your validator keys")),(0,r.kt)("h4",{id:"staking-deposit-cli"},(0,r.kt)("strong",{parentName:"h4"},"Staking deposit cli")),(0,r.kt)("p",null,"Copy the following commands into your terminal to download the cli and generate your keys. Change ",(0,r.kt)("inlineCode",{parentName:"p"},"num_validators"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"chain")," to the number of validators and / or testnet name you want to run."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget <https://github.com/ethereum/staking-deposit-cli/releases/download/v2.3.0/staking_deposit-cli-76ed782-linux-amd64.tar.gz>\ntar xvf staking_deposit-cli-9ab0b05-linux-amd64.tar.gz\ncd staking_deposit-cli-9ab0b05-linux-amd64/\n./deposit new-mnemonic --num_validators 1 --chain mainnet\n")),(0,r.kt)("p",null,"Above should result with small structure created:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"main directory (starts with ",(0,r.kt)("em",{parentName:"li"},'"staking',"_",'"'),")",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"keys")," directory",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"keystore")," json file"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"deposit","_","data")," json file"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"deposit")," file")))),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"keystore")," file will be used later on to start Validator client on machine."),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"deposit","_","data")," file will be used for launchpad to confirm Identity and send 32 ETH which will be used for Validator\npurpose."),(0,r.kt)("h4",{id:"wagyu-key-gen"},(0,r.kt)("strong",{parentName:"h4"},"Wagyu Key Gen")),(0,r.kt)("p",null,"Download wagyu from ",(0,r.kt)("a",{parentName:"p",href:"https://wagyu.gg/"},"their website")," and select the download compatible with your operating system."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1634).Z,width:"1894",height:"1492"})),(0,r.kt)("p",null,"Clicking on the top right corner you can select the network you want to generate your keys for. If not connecting to a\ntestnet, let the network default to mainnet."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1011).Z,width:"1894",height:"1494"})),(0,r.kt)("p",null,"Click on \u2018Create New Secret Recovery Phrase\u2019 and you will be taken through the process of generating a 24 word secret to\ngenerate your validator keys. The number of keys you generate should match the number of validators you intend to run."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(7562).Z,width:"1896",height:"1490"})),(0,r.kt)("p",null,"When finished you should end up with a deposit file (starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"deposit_data-"),"and ends with ",(0,r.kt)("inlineCode",{parentName:"p"},".json"),") and a keystore\nfile (starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"keystore-"),"and ends with ",(0,r.kt)("inlineCode",{parentName:"p"},".json"),") per validator from both methods."),(0,r.kt)("h3",{id:"depositing-eth"},"Depositing ETH"),(0,r.kt)("p",null,"Next you will need to deposit ETH into the deposit contract. One validator requires 32 ETH to run. Go\nto ",(0,r.kt)("a",{parentName:"p",href:"https://launchpad.ethereum.org/en/"},"the mainnet launchpad")," to use your wallet and your deposit file to perform the\ndeposit. The launchpad will go through similar instructions as this guide to ensure you have performed them."),(0,r.kt)("h4",{id:"depositing-on-testnets"},"Depositing on Testnets"),(0,r.kt)("p",null,"You will need testnet ETH in order to run a validator."),(0,r.kt)("p",null,'{% tabs %}\n{% tab title="Kiln" %}\nGo to the ',(0,r.kt)("a",{parentName:"p",href:"https://kiln.themerge.dev/"},"official Kiln website")," and click on the ",(0,r.kt)("em",{parentName:"p"},"Add network to MetaMask")," button."),(0,r.kt)("p",null,"Get testnet ETH:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.kiln.ethdevops.io/"},"https://faucet.kiln.ethdevops.io/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kiln-faucet.pk-net.net/"},"https://kiln-faucet.pk-net.net/"))),(0,r.kt)("p",null,"Go to the launchpad and follow the instructions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kiln.launchpad.ethereum.org/en/"},"https://kiln.launchpad.ethereum.org/en/"))),(0,r.kt)("p",null,"Check the status of your validator on the beacon chain:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://beaconchain.kiln.themerge.dev"},"https://beaconchain.kiln.themerge.dev"),"\n{% endtab %}")),(0,r.kt)("p",null,'{% tab title="Ropsten" %}\nGet testnet ETH:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.egorfine.com/"},"https://faucet.egorfine.com/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.metamask.io/"},"https://faucet.metamask.io/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.dimensions.network/"},"https://faucet.dimensions.network/"))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://ethstaker.cc/"},"ethstaker")," community discord can provide testnet ETH if you don\u2019t have enough to deposit 32\nETH."),(0,r.kt)("p",null,"Go to the launchpad and follow the instructions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ropsten.launchpad.ethereum.org/en/"},"https://ropsten.launchpad.ethereum.org/en/"))),(0,r.kt)("p",null,"Check the status of your validator on the beacon chain:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ropsten.beaconcha.in/"},"https://ropsten.beaconcha.in/"),"\n{% endtab %}")),(0,r.kt)("p",null,'{% tab title="Goerli" %}\nGet testnet ETH:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://goerlifaucet.com/"},"https://goerlifaucet.com")," (No auth, or social media account required)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fauceth.komputing.org/?chain=5"},"https://fauceth.komputing.org/?chain=5")," (No social media account required)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.paradigm.xyz/"},"https://faucet.paradigm.xyz/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.goerli.mudit.blog/"},"https://faucet.goerli.mudit.blog/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucets.chain.link/goerli"},"https://faucets.chain.link/goerli")," (No social media account required)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://goerli-faucet.pk910.de/"},"https://goerli-faucet.pk910.de/")," (PoW powered, No social media account required)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://goerli-faucet.com/"},"https://goerli-faucet.com/")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ayanamitech/ethereum-faucet"},"Open Source"),",\nTelegram Bot authenticated, No social media account required)")),(0,r.kt)("p",null,"Go to the launchpad and follow the instructions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://goerli.launchpad.ethereum.org/en/"},"https://goerli.launchpad.ethereum.org/en/"))),(0,r.kt)("p",null,"Check the status of your validator on the beacon chain:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://goerli.beaconcha.in/"},"https://goerli.beaconcha.in/"),"\n{% endtab %}\n{% endtabs %}")),(0,r.kt)("h3",{id:"configuring-a-validator"},"Configuring a Validator"),(0,r.kt)("p",null,"DO NOT run two validators with the same keys. This can lead to your validator signing two different blocks and lead\nto ",(0,r.kt)("a",{parentName:"p",href:"https://consensys.net/knowledge-base/ethereum-2/glossary/"},"slashing")," which will significantly reduce your staked\nETH."),(0,r.kt)("p",null,"Like configuring your consensus and execution client, create a dedicated user for your validator:"),(0,r.kt)("p",null,'{% tabs %}\n{% tab title="Lighthouse" %}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo useradd --no-create-home --shell /bin/false lighthousevalidator\nsudo mkdir -p /var/lib/lighthouse/validators\nsudo chown -R lighthousevalidator:lighthousevalidator /var/lib/lighthouse/validators\nsudo chmod 700 /var/lib/lighthouse/validators\n")),(0,r.kt)("p",null,"{% endtab %}"),(0,r.kt)("p",null,'{% tab title="Teku" %}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo useradd --no-create-home --shell /bin/false tekuvalidator\nsudo mkdir -p /home/tekuvalidator\nsudo chown -R tekuvalidator:tekuvalidator /home/tekuvalidator\n")),(0,r.kt)("p",null,"Also ensure that new user has access to keystore files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R tekuvalidator:tekuvalidator /path/to/keystores\n")),(0,r.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,r.kt)("p",null,"Below there is a description on how to start Validator service for various CL on Your machine."),(0,r.kt)("p",null,'{% tabs %}\n{% tab title="Lighthouse" %}\nThe keystore file (generated previously and starts with ',(0,r.kt)("inlineCode",{parentName:"p"},"keystore-")," ) needs to be imported for the Lighthouse validator\nclient. Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"/path/to/keystores")," with the absolute path you saved your keystore file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo /usr/local/bin/lighthouse account validator import \\\\\n    --directory /path/to/keystores \\\\\n    --datadir /var/lib/lighthouse \\\\\n    --network mainnet\nsudo chown -R lighthousevalidator:lighthousevalidator /var/lib/lighthouse/validators\n")),(0,r.kt)("p",null,"The command will prompt for your keystore password."),(0,r.kt)("p",null,"Create the systemd file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/lighthousevalidator.service\n")),(0,r.kt)("p",null,"Paste the following configuration into the file. Make sure to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000"),"\naddress with your own Ethereum address where you want to receive the proceeds from transaction fees (post merge)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[Unit]\nDescription=Lighthouse Ethereum Client Validator Client\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=lighthousevalidator\nGroup=lighthousevalidator\nType=simple\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/lighthouse vc \\\\\n    --network mainnet \\\\\n    --datadir /var/lib/lighthouse \\\\\n    --metrics-explanation \\\\\n    --suggested-fee-recipient 0x0000000000000000000000000000000000000000\n\n[Install]\nWantedBy=multi-user.target\n")),(0,r.kt)("p",null,"Reload systemd to reflect the changes and start the service. Check the status to make sure it\u2019s running correctly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl start lighthousevalidator.service\nsudo systemctl status lighthousevalidator.service\n")),(0,r.kt)("p",null,"Enable the Lighthouse validator client service to automatically start on reboot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable lighthousevalidator.service\n")),(0,r.kt)("p",null,"You can watch the live messages from your Lighthouse validator client logs using this command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -f -u lighthousevalidator.service -o cat | ccze -A\n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," to stop showing those messages\n{% endtab %}"),(0,r.kt)("p",null,'{% tab title="Teku" %}\nIn Teku at first we need to create a file with password used during creation of Validator Keys. In order to do that,\nnavigate to the path, where keys created\non ',(0,r.kt)("a",{parentName:"p",href:"/nethermindeth/docs/resources/guides-and-helpers/validator-setup/eth2-validator#generating-validator-keys"},"#generating-validator-keys")," are stored."," "),(0,r.kt)("p",null,"Then on ",(0,r.kt)("em",{parentName:"p"},"keys")," directory level create a separate directory called ",(0,r.kt)("em",{parentName:"p"},"passwords"),". Result should be two directories ",(0,r.kt)("em",{parentName:"p"},"keys"),"\nand ",(0,r.kt)("em",{parentName:"p"},"passwords")," on the same level under ",(0,r.kt)("em",{parentName:"p"},"staking")," main directory."),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"passwords")," directory we need to create txt file which will have exactly the same name as ",(0,r.kt)("em",{parentName:"p"},"keystore")," json file.\nResult should be:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"keys",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"keystore.json"))),(0,r.kt)("li",{parentName:"ol"},"passwords",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"keystore.txt")))),(0,r.kt)("p",null,"Now, in ",(0,r.kt)("em",{parentName:"p"},"keystore.txt")," user needs to put password used for creation of Validator Keys and save this file."),(0,r.kt)("p",null,"Then You can proceed to creation of Validator service. In order to do that, create systemd file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/tekuvalidator.service\n")),(0,r.kt)("p",null,"Paste the following configuration into the file. Make sure to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000"),"\naddress with your own Ethereum address where you want to receive the proceeds from transaction fees (post merge)."),(0,r.kt)("p",null,"Also make sure that You replace ",(0,r.kt)("inlineCode",{parentName:"p"},"/path/to/keystores")," to path, where Validator Keys are stored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[Unit]\nDescription=TekuEthereum Client Validator Client\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=tekuvalidator\nGroup=tekuvalidator\nType=simple\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/teku-22.8.1/bin/teku validator-client \\\n    --beacon-node-api-endpoint=http://127.0.0.1:5051 \\\n    --validator-keys=/path/to/keystores/staking/keys/keystore.json:/path/to/keystores/staking/passwords/keystore.txt \\\n    --network mainnet\\\n    --validators-proposer-default-fee-recipient=0x0000000000000000000000000000000000000000\n\n[Install]\nWantedBy=multi-user.target\n")),(0,r.kt)("p",null,"Reload systemd to reflect the changes and start the service. Check the status to make sure it\u2019s running correctly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl start tekuvalidator.service\nsudo systemctl status tekuvalidator.service\n")),(0,r.kt)("p",null,"Enable the Teku validator client service to automatically start on reboot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable tekuvalidator.service\n")),(0,r.kt)("p",null,"You can watch the live messages from your Teku validator client logs using this command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -f -u tekuvalidator.service -o cat | ccze -A\n")),(0,r.kt)("p",null,"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," to stop showing those messages\n{% endtab %}\n{% endtabs %}"),(0,r.kt)("h3",{id:"validator-tips-and-tricks"},"Validator Tips and Tricks"),(0,r.kt)("p",null,"Go through ",(0,r.kt)("a",{parentName:"p",href:"https://launchpad.ethereum.org/en/checklist"},"the checklist")," by the Ethereum foundation for some ways to\nimprove security and optimise your validator rewards. For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Setting\nup ",(0,r.kt)("a",{parentName:"li",href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-20-04"},"a firewall"),"\nand forward ports 30303 (Nethermind P2P) and 9000 (Lighthouse P2P) to prevent malicious external actors accessing your\nnode"),(0,r.kt)("li",{parentName:"ul"},"Ensure the time on your\nnode ",(0,r.kt)("a",{parentName:"li",href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-time-synchronization-on-ubuntu-20-04"},"is synced")),(0,r.kt)("li",{parentName:"ul"},"Adding monitoring dashboards\nfor ",(0,r.kt)("a",{parentName:"li",href:"https://docs.nethermind.io/nethermind/guides-and-helpers/deploy-nethermind-with-monitoring-stack"},"Nethermind"),"\nand ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse-metrics"},"Lighthouse")," to view real time metrics of your consensus and execution\nclient"),(0,r.kt)("li",{parentName:"ul"},"Using a VPN to protect the privacy of your validator"),(0,r.kt)("li",{parentName:"ul"},"Add an optional ",(0,r.kt)("inlineCode",{parentName:"li"},"--graffiti")," flag that adds a message to the blocks your validator proposes, publicly viewable on the\nbeacon chain")),(0,r.kt)("h4",{id:"monitoring"},"Monitoring"),(0,r.kt)("p",null,"To maximise your validator rewards, ensure that your node is always running and online. Downloading\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://beaconcha.in/mobile"},"Beacon Chain mobile app")," will allow you to monitor and set up alerts when your\nvalidator is offline or not earning rewards. You can also make an account on\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://beaconcha.in/"},"Beacon Chain explorer")," and set up email alerts."),(0,r.kt)("p",null,"If you receive an alert check your machine is connected to the internet and restart your services:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart nethermind.service\nsudo systemctl restart lighthousebeacon.service\nsudo systemctl restart lighthousevalidator.service\n")),(0,r.kt)("h2",{id:"credits"},"Credits"),(0,r.kt)("p",null,"Based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/remyroy/ethstaker/blob/main/merge-devnet.md"},"ethstaker\u2019s guide")," to connecting to kiln\ntestnet."))}p.isMDXComponent=!0},1634:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ScreenShot2022-06-15at9.12.21am-e640269ee4675d39ce45be4891fd7791.png"},1011:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ScreenShot2022-06-15at9.20.16am-17a84f7e8fc7aa9cfbbde1df5c45676a.png"},7562:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ScreenShot2022-06-15at9.40.05am-c33b4582a1c26d688dcc661b2201657b.png"}}]);