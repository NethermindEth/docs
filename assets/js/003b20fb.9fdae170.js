"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8392],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),N=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=N(t.components);return n.createElement(s.Provider,{value:e},t.children)},f="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),f=N(a),p=r,m=f["".concat(s,".").concat(p)]||f[p]||c[p]||l;return a?n.createElement(m,i(i({ref:e},d),{},{components:a})):n.createElement(m,i({ref:e},d))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=p;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[f]="string"==typeof t?t:r,i[1]=o;for(var N=2;N<l;N++)i[N]=a[N];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9772:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>N});var n=a(7462),r=(a(7294),a(3905));const l={},i="Sync",o={unversionedId:"fundamentals/configuration/sync",id:"fundamentals/configuration/sync",title:"Sync",description:"| Property                           | Env Variable                                             | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | Default         |",source:"@site/docs/02-fundamentals/04-configuration/sync.md",sourceDirName:"02-fundamentals/04-configuration",slug:"/fundamentals/configuration/sync",permalink:"/docs/fundamentals/configuration/sync",draft:!1,editUrl:"https://github.com/NethermindEth/docs/tree/main/docs/docs/02-fundamentals/04-configuration/sync.md",tags:[],version:"current",lastUpdatedAt:1692271277,formattedLastUpdatedAt:"Aug 17, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Seq",permalink:"/docs/fundamentals/configuration/seq"},next:{title:"TraceStore",permalink:"/docs/fundamentals/configuration/tracestore"}},s={},N=[],d={toc:N},f="wrapper";function c(t){let{components:e,...a}=t;return(0,r.kt)(f,(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sync"},"Sync"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Property"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Env Variable"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"AncientBodiesBarrier"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_ANCIENTBODIESBARRIER"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[EXPERIMENTAL]"," Defines the earliest body downloaded in fast sync when DownloadBodiesInFastSync is enabled. Actual values used will be Math.Max(1, Math.Min(PivotNumber, AncientBodiesBarrier))"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"AncientReceiptsBarrier"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_ANCIENTRECEIPTSBARRIER"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[EXPERIMENTAL]"," Defines the earliest receipts downloaded in fast sync when DownloadReceiptsInFastSync is enabled. Actual value used will be Math.Max(1, Math.Min(PivotNumber, Math.Max(AncientBodiesBarrier, AncientReceiptsBarrier)))"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"BlocksDbTuneDbMode"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_BLOCKSDBTUNEDBMODE"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[EXPERIMENTAL]"," Optimize db for write during sync just for blocks db. Useful for turning on blobs file."),(0,r.kt)("td",{parentName:"tr",align:"left"},"EnableBlobFiles")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"DownloadBodiesInFastSync"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_DOWNLOADBODIESINFASTSYNC"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If set to 'true' then the block bodies will be downloaded in the Fast Sync mode."),(0,r.kt)("td",{parentName:"tr",align:"left"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"DownloadHeadersInFastSync"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_DOWNLOADHEADERSINFASTSYNC"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If set to 'false' then fast sync will only download recent blocks."),(0,r.kt)("td",{parentName:"tr",align:"left"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"DownloadReceiptsInFastSync"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_DOWNLOADRECEIPTSINFASTSYNC"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If set to 'true' then the receipts will be downloaded in the Fast Sync mode. This will slow down the process by a few hours but will allow you to interact with dApps that execute extensive historical logs searches (like Maker CDPs)."),(0,r.kt)("td",{parentName:"tr",align:"left"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"FastBlocks"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_FASTBLOCKS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If set to 'true' then in the Fast Sync mode blocks will be first downloaded from the provided PivotNumber downwards. This allows for parallelization of requests with many sync peers and with no need to worry about syncing a valid branch (syncing downwards to 0). You need to enter the pivot block number, hash and total difficulty from a trusted source (you can use etherscan and confirm with other sources if you wan to change it)."),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"FastSync"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_FASTSYNC"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If set to 'true' then the Fast Sync (eth/63) synchronization algorithm will be used."),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"FastSyncCatchUpHeightDelta"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_FASTSYNCCATCHUPHEIGHTDELTA"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Relevant only if 'FastSync' is 'true'. If set to a value, then it will set a minimum height threshold limit up to which FullSync, if already on, will stay on when chain will be behind network. If this limit will be exceeded, it will switch back to FastSync. In normal usage we do not recommend setting this to less than 32 as this can cause issues with chain reorgs. Please note that last 2 blocks will always be processed in FullSync, so setting it to less than 2 will have no effect."),(0,r.kt)("td",{parentName:"tr",align:"left"},"8192")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"FixReceipts"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_FIXRECEIPTS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[ONLY FOR MISSING RECEIPTS ISSUE]"," Turns on receipts validation that checks for ones that might be missing due to previous bug. It downloads them from network if needed.If used please check that PivotNumber is same as original used when syncing the node as its used as a cut-off point."),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"FixTotalDifficulty"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTY"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[ONLY TO FIX INCORRECT TOTAL DIFFICULTY ISSUE]"," Recalculates total difficulty starting from FixTotalDifficultyStartingBlock to FixTotalDifficultyLastBlock."),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"FixTotalDifficultyLastBlock"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTYLASTBLOCK"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[ONLY TO FIX INCORRECT TOTAL DIFFICULTY ISSUE]"," Last block which total difficulty will be recalculated. If set to null equals to best known block"),(0,r.kt)("td",{parentName:"tr",align:"left"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"FixTotalDifficultyStartingBlock"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTYSTARTINGBLOCK"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[ONLY TO FIX INCORRECT TOTAL DIFFICULTY ISSUE]"," First block which total difficulty will be recalculated."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"MaxAttemptsToUpdatePivot"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_MAXATTEMPTSTOUPDATEPIVOT"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Max number of attempts (seconds) to update pivot block basing on Forkchoice message from Consensus Layer. Only for PoS chains."),(0,r.kt)("td",{parentName:"tr",align:"left"},"900")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"MaxProcessingThreads"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_MAXPROCESSINGTHREADS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[TECHNICAL]"," Specify max num of thread used for processing. Default is same as logical core count."),(0,r.kt)("td",{parentName:"tr",align:"left"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"NetworkingEnabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_NETWORKINGENABLED"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If 'false' then the node does not connect to peers."),(0,r.kt)("td",{parentName:"tr",align:"left"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"NonValidatorNode"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_NONVALIDATORNODE"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[EXPERIMENTAL]"," Only for non validator nodes! If set to true, DownloadReceiptsInFastSync and/or DownloadBodiesInFastSync can be set to false."),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PivotHash"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_PIVOTHASH"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Hash of the pivot block for the Fast Blocks sync."),(0,r.kt)("td",{parentName:"tr",align:"left"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PivotNumber"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_PIVOTNUMBER"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number of the pivot block for the Fast Blocks sync."),(0,r.kt)("td",{parentName:"tr",align:"left"},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PivotTotalDifficulty"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_PIVOTTOTALDIFFICULTY"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Total Difficulty of the pivot block for the Fast Blocks sync (not - this is total difficulty and not difficulty)."),(0,r.kt)("td",{parentName:"tr",align:"left"},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"SnapSync"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_SNAPSYNC"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Enables SNAP sync protocol."),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"SnapSyncAccountRangePartitionCount"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_SNAPSYNCACCOUNTRANGEPARTITIONCOUNT"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number of account range partition to create. Increase snap sync request concurrency. Value must be between 1 to 256 (inclusive)."),(0,r.kt)("td",{parentName:"tr",align:"left"},"8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"StrictMode"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_STRICTMODE"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Disable some optimization and run a more extensive sync. Useful for broken sync state but normally not needed"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"SynchronizationEnabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_SYNCHRONIZATIONENABLED"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If 'false' then the node does not download/process new blocks."),(0,r.kt)("td",{parentName:"tr",align:"left"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TuneDbMode"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_TUNEDBMODE"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[EXPERIMENTAL]"," Optimize db for write during sync. Significantly reduce total writes written and some sync time if you are not network limited."),(0,r.kt)("td",{parentName:"tr",align:"left"},"Default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"UseGethLimitsInFastBlocks"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_USEGETHLIMITSINFASTBLOCKS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If set to 'true' then in the Fast Blocks mode Nethermind generates smaller requests to avoid Geth from disconnecting. On the Geth heavy networks (mainnet) it is desired while on Parity or Nethermind heavy networks (Goerli, AuRa) it slows down the sync by a factor of ~4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"WitnessProtocolEnabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"NETHERMIND_SYNCCONFIG_WITNESSPROTOCOLENABLED"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Enables witness protocol."),(0,r.kt)("td",{parentName:"tr",align:"left"},"false")))))}c.isMDXComponent=!0}}]);