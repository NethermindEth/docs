"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9892],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>s});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var g=r.createContext({}),p=function(e){var t=r.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(g.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,g=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,s=c["".concat(g,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(s,l(l({ref:t},d),{},{components:n})):r.createElement(s,l({ref:t},d))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var g in t)hasOwnProperty.call(t,g)&&(i[g]=t[g]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},l="Logging Configuration",i={unversionedId:"fundamentals/logs/logging-configuration",id:"fundamentals/logs/logging-configuration",title:"Logging Configuration",description:"Log config file location",source:"@site/docs/fundamentals/06-logs/logging-configuration.md",sourceDirName:"fundamentals/06-logs",slug:"/fundamentals/logs/logging-configuration",permalink:"/docs/fundamentals/logs/logging-configuration",draft:!1,editUrl:"https://github.com/NethermindEth/docs/tree/main/docs/docs/fundamentals/06-logs/logging-configuration.md",tags:[],version:"current",lastUpdatedAt:1692295600,formattedLastUpdatedAt:"Aug 17, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logs",permalink:"/docs/category/logs"},next:{title:"Explaining Nethermind logs",permalink:"/docs/fundamentals/logs/logs"}},g={},p=[{value:"Log config file location",id:"log-config-file-location",level:2},{value:"Log config file syntax",id:"log-config-file-syntax",level:2},{value:"Config or CLI log rules",id:"config-or-cli-log-rules",level:2},{value:"Global logging override",id:"global-logging-override",level:2},{value:"JSON RPC logging level",id:"json-rpc-logging-level",level:2},{value:"Enterprise Logging",id:"enterprise-logging",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"logging-configuration"},"Logging Configuration"),(0,a.kt)("h2",{id:"log-config-file-location"},"Log config file location"),(0,a.kt)("p",null,"Logging in Nethermind is done via NLog library that can be configured by editing the NLog.config file."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Environment Type"),(0,a.kt)("th",{parentName:"tr",align:null},"NLog.config location"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"built from src - Debug mode"),(0,a.kt)("td",{parentName:"tr",align:null},"src\\Nethermind\\Nethermind.Runner\\bin\\Debug\\netcoreapp3.1\\NLog.config")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"built from src - Release mode"),(0,a.kt)("td",{parentName:"tr",align:null},"src\\Nethermind\\Nethermind.Runner\\bin\\Release\\netcoreapp3.1\\NLog.config")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PPA"),(0,a.kt)("td",{parentName:"tr",align:null},"/usr/share/nethermind/NLog.config")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Docker"),(0,a.kt)("td",{parentName:"tr",align:null},"/nethermind/NLog.config")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"from ",(0,a.kt)("a",{parentName:"td",href:"https://downloads.nethermind.io"},"downloads page")),(0,a.kt)("td",{parentName:"tr",align:null},"top level directory after unzipping the package")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"from ",(0,a.kt)("a",{parentName:"td",href:"https://github.com/NethermindEth/nethermind/releases"},"GitHub releases page")),(0,a.kt)("td",{parentName:"tr",align:null},"top level directory after unzipping the package")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dAppNode"),(0,a.kt)("td",{parentName:"tr",align:null},"? ","[","to be documented]")))),(0,a.kt)("h2",{id:"log-config-file-syntax"},"Log config file syntax"),(0,a.kt)("p",null,"Detailed NLog configuration options can be found\nhere: ",(0,a.kt)("a",{parentName:"p",href:"https://nlog-project.org/config/"},"https://nlog-project.org/config/")),(0,a.kt)("h2",{id:"config-or-cli-log-rules"},"Config or CLI log rules"),(0,a.kt)("p",null,"Simple logging rules can be added through configuration file or command line argument."),(0,a.kt)("p",null,"For example this would add ",(0,a.kt)("inlineCode",{parentName:"p"},"Trace")," level logs to any logger under ",(0,a.kt)("inlineCode",{parentName:"p"},"Synchronization")," module and ",(0,a.kt)("inlineCode",{parentName:"p"},"Debug")," level logs\nfor ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockTree")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"Blockchain")," module:\\\n",(0,a.kt)("inlineCode",{parentName:"p"},"--Init.LogRules Synchronization.*:Trace;Blockchain.BlockTree:Debug")),(0,a.kt)("h2",{id:"global-logging-override"},"Global logging override"),(0,a.kt)("p",null,"Additionally there are global logging override that you can use temporarily:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Command line override"),(0,a.kt)("th",{parentName:"tr",align:null},"Log level"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"./Nethermind.Runner --config mainnet --log TRACE"),(0,a.kt)("td",{parentName:"tr",align:null},"TRACE")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"./Nethermind.Runner --config mainnet --log DEBUG"),(0,a.kt)("td",{parentName:"tr",align:null},"DEBUG")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"./Nethermind.Runner --config mainnet --log INFO"),(0,a.kt)("td",{parentName:"tr",align:null},"INFO")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"./Nethermind.Runner --config mainnet --log WARN"),(0,a.kt)("td",{parentName:"tr",align:null},"WARN")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"./Nethermind.Runner --config mainnet --log ERROR"),(0,a.kt)("td",{parentName:"tr",align:null},"ERROR")))),(0,a.kt)("h2",{id:"json-rpc-logging-level"},"JSON RPC logging level"),(0,a.kt)("p",null,"This can be done by including these lines in the logging configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<logger name="JsonRpc.*" minlevel="Error" writeTo="file-async"/>\n<logger name="JsonRpc.*" minlevel="Error" writeTo="auto-colored-console-async" final="true"/>\n<logger name="JsonRpc.*" final="true"/>\n')),(0,a.kt)("h2",{id:"enterprise-logging"},"Enterprise Logging"),(0,a.kt)("p",null,"See how to configure Seq ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nethermind.io/nethermind/enterprise/seq"},"here")))}u.isMDXComponent=!0}}]);